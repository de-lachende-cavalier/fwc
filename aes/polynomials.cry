module polynomials where
/*
 * Module used to implement GF(2^^8) operations.
 */

import params(GF28)

/* irreducible is a polynomial that makes sure multiplication and division are closed in GF(2^^8) */
irreducible = <| x^^8 + x^^4 + x^^3 + x + 1 |>

/*
 * Adds n polynomials (in GF(2^^8)).
 *
 * Input: n polynomials in GF(2^^8)
 * Output: The result of the addition (a byte)
 */
GF28_Add : {n} (fin n) => [n]GF28 -> GF28
GF28_Add ps = srs ! 0
  where
    srs = [zero] # [p ^ r | p <- ps
                          | r <- srs
                  ]

/*
 * Multiplies 2 polynomials (in GF(2^^8)).
 * (Division is taken care of by Cryptol with pdiv).
 *
 * Input: n polynomials in GF(2^^8)
 * Output: Their product (a byte)
 */
GF28_Mul : GF28 -> GF28 -> GF28
GF28_Mul p r = pmod (pmult p r) irreducible

/*
 * Implements the power operation in GF(2^^8).
 *
 * Input: A polynomial p in GF(2^^8) and the exponent k
 * Output: The result of taking p to the k in GF(2^^8)
 */
GF28_Pow : GF28 -> [8] -> GF28
GF28_Pow p k = pow k
  where
    square x = GF28_Mul x x
    odd x = x ! 0 // x is odd <==> the last bit is 1
    pow n = if n == 0 then 1
            else if odd n then GF28_Mul p (square (pow (n >> 1)))
            else square (pow (n >> 1))
/*
 * Computes the multiplicative inverse in GF(2^^8).
 *
 * Input: A polynomial in GF(2^^8)
 * Output: Its multiplicative inverse in GF(2^^8)
 */
GF28_Inv : GF28 -> GF28
GF28_Inv p = GF28_Pow p 254 // GF(2^^8) is a cyclic group under multiplication => x^^255 = 1


polySelfAdd : GF28 -> Bit
property polySelfAdd poly = poly ^ poly == 0

mulUnit : GF28 -> Bit
property mulUnit p = GF28_Mul p 1 == p

mulCommut : GF28 -> GF28 -> Bit
property mulCommut p r = GF28_Mul p r == GF28_Mul r p

mulAssoc : GF28 -> GF28 -> GF28 -> Bit
property mulAssoc p r s = GF28_Mul (GF28_Mul p r) s == GF28_Mul p (GF28_Mul r s)

correctInv : GF28 -> Bit
property correctInv p = if p == 0 then p' == 0
                        else GF28_Mul p p' == 1
                          where
                            p' = GF28_Inv p
